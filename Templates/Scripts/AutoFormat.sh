#!/bin/bash
# Template Version: 3 | ContextKit: 0.2.0-cursor | Updated: 2025-10-02

# auto-format.sh - Auto-format edited files
# Called by PostToolUse hook after Cursor edits files

# ⚠️ FOR DEVELOPERS: Do not edit this file - changes will be overwritten during ContextKit updates.
# Report bugs: https://github.com/tuan-nng/ContextKit/issues

## Purpose
# When file edits occur, detect file type and apply appropriate formatters
# only on that specific file (not entire project) to ensure immediate code consistency
# without performance impact. Supports: Swift, TypeScript, JavaScript, React, Python, Go, Rust, etc.

set -e

# Swift formatting (SwiftFormat + swift-format)
format_swift_file() {
    local file="$1"
    echo "📝 Auto-formatting Swift file: $file"

    if command -v swiftformat &> /dev/null; then
        if [ -f ".swiftformat" ]; then
            swiftformat "$file" --config .swiftformat --quiet
        else
            swiftformat "$file" --quiet
        fi
        echo "  ✅ SwiftFormat applied"
    else
        echo "  ⚠️  SwiftFormat not found - install with: brew install swiftformat"
    fi

    if command -v swift-format &> /dev/null; then
        if [ -f ".swift-format" ]; then
            swift-format --in-place "$file" --configuration .swift-format
        else
            swift-format --in-place "$file"
        fi
        echo "  ✅ swift-format applied"
    else
        echo "  ⚠️  swift-format not found - install with: xcode-select --install"
    fi
}

# TypeScript/JavaScript/React formatting (Prettier + ESLint)
format_ts_js_file() {
    local file="$1"
    echo "📝 Auto-formatting TypeScript/JavaScript file: $file"

    # Try Prettier first (formatting)
    if command -v prettier &> /dev/null; then
        prettier --write "$file" --log-level silent 2>/dev/null || true
        echo "  ✅ Prettier applied"
    elif [ -f "node_modules/.bin/prettier" ]; then
        ./node_modules/.bin/prettier --write "$file" --log-level silent 2>/dev/null || true
        echo "  ✅ Prettier applied (local)"
    else
        echo "  ⚠️  Prettier not found - install with: npm install -g prettier"
    fi

    # Try ESLint second (linting + auto-fix)
    if command -v eslint &> /dev/null; then
        eslint --fix "$file" --quiet 2>/dev/null || true
        echo "  ✅ ESLint applied"
    elif [ -f "node_modules/.bin/eslint" ]; then
        ./node_modules/.bin/eslint --fix "$file" --quiet 2>/dev/null || true
        echo "  ✅ ESLint applied (local)"
    fi
}

# Python formatting (Black + isort)
format_python_file() {
    local file="$1"
    echo "📝 Auto-formatting Python file: $file"

    if command -v black &> /dev/null; then
        black "$file" --quiet 2>/dev/null || true
        echo "  ✅ Black applied"
    else
        echo "  ⚠️  Black not found - install with: pip install black"
    fi

    if command -v isort &> /dev/null; then
        isort "$file" --quiet 2>/dev/null || true
        echo "  ✅ isort applied"
    fi
}

# Go formatting (gofmt + goimports)
format_go_file() {
    local file="$1"
    echo "📝 Auto-formatting Go file: $file"

    if command -v gofmt &> /dev/null; then
        gofmt -w "$file" 2>/dev/null || true
        echo "  ✅ gofmt applied"
    fi

    if command -v goimports &> /dev/null; then
        goimports -w "$file" 2>/dev/null || true
        echo "  ✅ goimports applied"
    fi
}

# Rust formatting (rustfmt)
format_rust_file() {
    local file="$1"
    echo "📝 Auto-formatting Rust file: $file"

    if command -v rustfmt &> /dev/null; then
        rustfmt "$file" 2>/dev/null || true
        echo "  ✅ rustfmt applied"
    else
        echo "  ⚠️  rustfmt not found - install with: rustup component add rustfmt"
    fi
}

# Extract file path from Cursor hook JSON input
FILE_PATH=$(jq -r '.tool_input.file_path' 2>/dev/null)

# Exit early if no file path or jq failed
if [ -z "$FILE_PATH" ] || [ "$FILE_PATH" = "null" ]; then
    exit 0
fi

# Skip if file doesn't exist (might have been deleted)
if [ ! -f "$FILE_PATH" ]; then
    exit 0
fi

# Format based on file extension
case "$FILE_PATH" in
    *.swift)
        format_swift_file "$FILE_PATH"
        ;;
    *.ts|*.tsx|*.js|*.jsx|*.mjs|*.cjs)
        format_ts_js_file "$FILE_PATH"
        ;;
    *.py)
        format_python_file "$FILE_PATH"
        ;;
    *.go)
        format_go_file "$FILE_PATH"
        ;;
    *.rs)
        format_rust_file "$FILE_PATH"
        ;;
    *)
        # Skip unsupported file types silently
        exit 0
        ;;
esac