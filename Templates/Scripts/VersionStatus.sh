#!/bin/bash
# Template Version: 1 | ContextKit: 0.0.0 | Updated: 2025-09-14

# version-status.sh - ContextKit version management and project status
# Called by SessionStart hook when Claude Code starts a new session

# ⚠️ FOR DEVELOPERS: Do not edit this file - changes will be overwritten during ContextKit updates.
# Report bugs: https://github.com/FlineDev/ContextKit/issues

## Purpose
# - Auto-update global ContextKit installation via git pull on session startup
# - Check project/workspace ContextKit compatibility and suggest migration when needed
# - Only runs on startup sessions - silent for resume/clear/compact sessions

set -e

# Parse session context from Claude Code hook JSON input
SESSION_SOURCE=$(jq -r '.source' 2>/dev/null || echo "startup")
PROJECT_DIR=${CLAUDE_PROJECT_DIR:-$(pwd)}
CONTEXTKIT_DIR="$HOME/.ContextKit"

# Only run on startup sessions - exit silently for all others
if [ "$SESSION_SOURCE" != "startup" ]; then
    exit 0
fi

echo "🧠 ContextKit: Checking for updates..."

###########################################
# Global ContextKit Auto-Update
###########################################
update_global_contextkit() {
    # Check if ContextKit is installed globally
    if [ ! -d "$CONTEXTKIT_DIR" ]; then
        echo "  ❌ ContextKit not installed globally"
        echo "     💡 Install: curl -fsSL https://raw.githubusercontent.com/FlineDev/ContextKit/main/install.sh | sh"
        return 1
    fi

    # Get current version before update (line 2 parsing)
    local old_version="unknown"
    if [ -f "$CONTEXTKIT_DIR/CHANGELOG.md" ]; then
        old_version=$(sed -n '2p' "$CONTEXTKIT_DIR/CHANGELOG.md" 2>/dev/null | grep -o "ContextKit: [^|]*" | sed 's/ContextKit: *//' | sed 's/ *$//' || echo "unknown")
    fi

    # Auto-update global ContextKit repository
    cd "$CONTEXTKIT_DIR"
    if git pull origin main --quiet 2>/dev/null; then
        # Check if version actually changed (line 2 parsing)
        local new_version="unknown"
        if [ -f "$CONTEXTKIT_DIR/CHANGELOG.md" ]; then
            new_version=$(sed -n '2p' "$CONTEXTKIT_DIR/CHANGELOG.md" 2>/dev/null | grep -o "ContextKit: [^|]*" | sed 's/ContextKit: *//' | sed 's/ *$//' || echo "unknown")
        fi

        if [ "$old_version" != "$new_version" ] && [ "$new_version" != "unknown" ]; then
            echo "  🎉 ContextKit updated: v$old_version → v$new_version"
            echo "     💡 Update your project: /ctxk:proj:migrate"
            return 0
        else
            echo "  ✅ ContextKit: Up to date (v$new_version)"
            return 0
        fi
    else
        echo "  ⚠️  Could not check for updates (no internet connection)"
        echo "     ✅ Using cached version: v$old_version"
        return 0
    fi
}

###########################################
# Project Compatibility Check
###########################################
check_project_compatibility() {
    cd "$PROJECT_DIR"

    # Get current global version from CHANGELOG.md (line 2 parsing)
    local global_version="unknown"
    if [ -f "$CONTEXTKIT_DIR/CHANGELOG.md" ]; then
        global_version=$(sed -n '2p' "$CONTEXTKIT_DIR/CHANGELOG.md" 2>/dev/null | grep -o "ContextKit: [^|]*" | sed 's/ContextKit: *//' | sed 's/ *$//' || echo "unknown")
    fi

    # Check project version from installed migrate command
    if [ -f ".claude/commands/ctxk/proj/migrate.md" ]; then
        local project_version=$(sed -n '2p' ".claude/commands/ctxk/proj/migrate.md" 2>/dev/null | grep -o "ContextKit: [^|]*" | sed 's/ContextKit: *//' | sed 's/ *$//' || echo "unknown")

        if [ "$project_version" != "$global_version" ] && [ "$project_version" != "unknown" ] && [ "$global_version" != "unknown" ]; then
            echo "  ⚠️  Updates available: v$project_version → v$global_version"
            echo "     💡 Run: /ctxk:proj:migrate when ready"
            return 1
        fi
    else
        echo "  ⚪ Project not initialized with ContextKit"
        echo "     💡 Run: /ctxk:proj:init"
        return 1
    fi

    # Check workspace compatibility (find workspace Context.md in parent directories)
    check_workspace_compatibility "$global_version"
}

check_workspace_compatibility() {
    local global_version="$1"
    local current_dir="$PROJECT_DIR"

    while [ "$current_dir" != "/" ]; do
        local parent_dir="$(dirname "$current_dir")"
        if [ -f "$parent_dir/Context.md" ] && [ "$parent_dir" != "$PROJECT_DIR" ]; then
            if grep -q "ContextKit Version" "$parent_dir/Context.md"; then
                local workspace_version=$(grep "ContextKit Version" "$parent_dir/Context.md" | sed 's/.*: \(.*\)/\1/' 2>/dev/null || echo "unknown")

                if [ "$workspace_version" != "$global_version" ] && [ "$workspace_version" != "unknown" ]; then
                    echo "  ⚠️  Workspace needs update: v$workspace_version → v$global_version"
                    echo "     💡 Update: /ctxk:proj:init-workspace (in workspace directory)"
                    return 1
                fi
            fi
            break
        fi
        current_dir="$parent_dir"
    done
    return 0
}

###########################################
# Template Update Check (Lightweight)
###########################################
check_template_updates() {
    cd "$PROJECT_DIR"

    local updates_needed=0

    # File mappings from migrate command
    local mappings=(
        "Guidelines:Context/Guidelines:$CONTEXTKIT_DIR/Templates/Guidelines"
        "Commands:.claude/commands/ctxk:$CONTEXTKIT_DIR/Templates/Commands"
        "Agents:.claude/agents/ctxk:$CONTEXTKIT_DIR/Templates/Agents"
        "Scripts:Context/Scripts:$CONTEXTKIT_DIR/Templates/Scripts"
    )

    for mapping in "${mappings[@]}"; do
        local name=$(echo "$mapping" | cut -d: -f1)
        local local_dir=$(echo "$mapping" | cut -d: -f2)
        local source_dir=$(echo "$mapping" | cut -d: -f3)

        if [ -d "$local_dir" ] && [ -d "$source_dir" ]; then
            local outdated=$(count_outdated_templates "$local_dir" "$source_dir")
            updates_needed=$((updates_needed + outdated))
        fi
    done

    if [ "$updates_needed" -gt 0 ]; then
        echo "  ⚠️  Template updates available: $updates_needed files"
        echo "     💡 Update: /ctxk:proj:migrate when ready"
        return 1
    fi
    return 0
}

count_outdated_templates() {
    local local_dir="$1"
    local source_dir="$2"
    local count=0

    # Find all template files and compare versions
    find "$local_dir" -name "*.md" -o -name "*.sh" 2>/dev/null | while read -r local_file; do
        local rel_path="${local_file#$local_dir/}"
        local source_file="$source_dir/$rel_path"

        if [ -f "$source_file" ]; then
            # Extract template versions from line 2
            local local_version=$(sed -n '2p' "$local_file" 2>/dev/null | grep -o "Template Version: [0-9]*" | grep -o "[0-9]*" || echo "0")
            local source_version=$(sed -n '2p' "$source_file" 2>/dev/null | grep -o "Template Version: [0-9]*" | grep -o "[0-9]*" || echo "0")

            if [ "$local_version" -lt "$source_version" ] 2>/dev/null; then
                count=$((count + 1))
            fi
        fi
    done 2>/dev/null

    echo "$count"
}

###########################################
# Main Execution
###########################################
main() {
    local needs_updates=0

    # Auto-update global ContextKit and check for changes
    if ! update_global_contextkit; then
        return 1
    fi

    # Check project and workspace compatibility
    if ! check_project_compatibility; then
        needs_updates=1
    fi

    # Check if template updates are available
    if ! check_template_updates; then
        needs_updates=1
    fi

    # Simple ready message when everything is up-to-date
    if [ "$needs_updates" -eq 0 ]; then
        echo "  🧠 ContextKit ready for this session"
    fi
}

# Execute main function
main "$@"