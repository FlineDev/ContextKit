#!/bin/bash
# Template Version: 1 | ContextKit: 0.0.0 | Updated: 2025-01-26

# version-status.sh - ContextKit infrastructure health check
# Called by SessionStart hook when Claude Code starts a new session

# ⚠️ FOR DEVELOPERS: Do not edit this file - changes will be overwritten during ContextKit updates.
# Report bugs: https://github.com/FlineDev/ContextKit/issues

## Purpose
# - Check installed ContextKit version against latest available
# - Validate ContextKit infrastructure integrity (commands, subagents, guidelines)
# - Compare project/workspace template versions and suggest migration when needed
# - Provide quick ContextKit health status without noise

set -e

echo "🧠 ContextKit Infrastructure Check..."

CONTEXTKIT_DIR="$HOME/.ContextKit"
PROJECT_CONTEXT="./Context.md"
WORKSPACE_CONTEXT=""

# Find workspace context by traversing parent directories
current_dir="$(pwd)"
while [ "$current_dir" != "/" ]; do
    parent_dir="$(dirname "$current_dir")"
    if [ -f "$parent_dir/Context.md" ] && [ "$parent_dir" != "$(pwd)" ]; then
        WORKSPACE_CONTEXT="$parent_dir/Context.md"
        break
    fi
    current_dir="$parent_dir"
done

###########################################
# Version Management
###########################################
check_contextkit_installation() {
    echo "  📦 Checking ContextKit installation..."

    # Check if ContextKit is installed globally
    if [ ! -d "$CONTEXTKIT_DIR" ]; then
        echo "  ❌ ContextKit not installed globally"
        echo "     💡 Run: curl -fsSL https://raw.githubusercontent.com/FlineDev/ContextKit/main/install.sh | sh"
        return 1
    fi

    # Get installed version from CHANGELOG.md
    local installed_version="unknown"
    if [ -f "$CONTEXTKIT_DIR/CHANGELOG.md" ]; then
        installed_version=$(grep -m 1 "## \[" "$CONTEXTKIT_DIR/CHANGELOG.md" | sed 's/## \[\(.*\)\].*/\1/' 2>/dev/null || echo "unknown")
    fi

    echo "  📋 Installed ContextKit: v$installed_version"

    # Validate core installation integrity
    validate_installation_integrity

    # Check project/workspace compatibility
    check_project_compatibility "$installed_version"
}

validate_installation_integrity() {
    local missing_components=()

    # Check essential directories and files
    [ ! -d "$CONTEXTKIT_DIR/Templates/Commands" ] && missing_components+=("Commands")
    [ ! -d "$CONTEXTKIT_DIR/Templates/Subagents" ] && missing_components+=("Subagents")
    [ ! -d "$CONTEXTKIT_DIR/Guidelines" ] && missing_components+=("Guidelines")
    [ ! -f "$CONTEXTKIT_DIR/CHANGELOG.md" ] && missing_components+=("CHANGELOG.md")

    if [ ${#missing_components[@]} -gt 0 ]; then
        echo "  ⚠️  Missing ContextKit components: ${missing_components[*]}"
        echo "     💡 Reinstall: curl -fsSL https://raw.githubusercontent.com/FlineDev/ContextKit/main/install.sh | sh"
    else
        echo "  ✅ ContextKit installation integrity: OK"
    fi
}

check_project_compatibility() {
    local installed_version="$1"

    # Check project ContextKit version
    if [ -f "$PROJECT_CONTEXT" ]; then
        if grep -q "ContextKit Version" "$PROJECT_CONTEXT"; then
            local project_version=$(grep "ContextKit Version" "$PROJECT_CONTEXT" | sed 's/.*: \(.*\)/\1/' 2>/dev/null || echo "unknown")

            if [ "$project_version" != "$installed_version" ] && [ "$project_version" != "unknown" ]; then
                echo "  ⚠️  Project version mismatch: v$project_version → v$installed_version"
                echo "     💡 Update project: /ctxk:proj:migrate"
            else
                echo "  ✅ Project compatibility: OK"
            fi
        else
            echo "  ⚪ No ContextKit version info in project"
            echo "     💡 Initialize project: /ctxk:proj:init"
        fi
    else
        echo "  ⚪ No project Context.md found"
        echo "     💡 Initialize project: /ctxk:proj:init"
    fi

    # Check workspace version if present
    if [ -n "$WORKSPACE_CONTEXT" ] && [ -f "$WORKSPACE_CONTEXT" ]; then
        if grep -q "ContextKit Version" "$WORKSPACE_CONTEXT"; then
            local workspace_version=$(grep "ContextKit Version" "$WORKSPACE_CONTEXT" | sed 's/.*: \(.*\)/\1/' 2>/dev/null || echo "unknown")

            if [ "$workspace_version" != "$installed_version" ] && [ "$workspace_version" != "unknown" ]; then
                echo "  ⚠️  Workspace version mismatch: v$workspace_version → v$installed_version"
                echo "     💡 Update workspace: /ctxk:proj:init-workspace"
            fi
        fi
    fi
}

###########################################
# Template Health Check
###########################################
check_template_health() {
    echo "  🔧 Checking template health..."

    local outdated_templates=()

    # Check command templates (only if project has ContextKit)
    if [ -f "$PROJECT_CONTEXT" ] && [ -d ".claude/commands/ctxk" ]; then
        outdated_templates+=($(check_template_versions "Commands" ".claude/commands/ctxk" "$CONTEXTKIT_DIR/Templates/Commands"))
    fi

    # Check subagent templates
    if [ -d ".claude/subagents" ]; then
        outdated_templates+=($(check_template_versions "Subagents" ".claude/subagents" "$CONTEXTKIT_DIR/Templates/Subagents"))
    fi

    # Check guidelines (copied to Context/Guidelines during setup)
    if [ -d "Context/Guidelines" ]; then
        outdated_templates+=($(check_template_versions "Guidelines" "Context/Guidelines" "$CONTEXTKIT_DIR/Guidelines"))
    fi

    if [ ${#outdated_templates[@]} -gt 0 ]; then
        echo "  ⚠️  Outdated templates detected: ${#outdated_templates[@]}"
        echo "     💡 Update templates: /ctxk:proj:migrate"
    else
        echo "  ✅ Template health: All current"
    fi
}

# Function to check template versions in a directory
check_template_versions() {
    local category="$1"
    local local_dir="$2"
    local source_dir="$3"
    local outdated_count=0

    if [ ! -d "$local_dir" ] || [ ! -d "$source_dir" ]; then
        return 0
    fi

    # Find all .md files and check versions
    find "$local_dir" -name "*.md" -type f | while read -r local_file; do
        # Get relative path for matching
        local rel_path="${local_file#$local_dir/}"
        local source_file="$source_dir/$rel_path"

        if [ -f "$source_file" ]; then
            # Extract template versions (line 2 for all file types)
            local local_version=$(sed -n '2p' "$local_file" 2>/dev/null | grep -o "Template Version: [0-9]*" | grep -o "[0-9]*" || echo "0")
            local source_version=$(sed -n '2p' "$source_file" 2>/dev/null | grep -o "Template Version: [0-9]*" | grep -o "[0-9]*" || echo "0")

            if [ "$local_version" -lt "$source_version" ] 2>/dev/null; then
                outdated_count=$((outdated_count + 1))
            fi
        fi
    done

    echo $outdated_count
}

###########################################
# Git Status (Minimal)
###########################################
check_git_status() {
    if git rev-parse --git-dir > /dev/null 2>&1; then
        if [ -n "$(git status --porcelain)" ]; then
            echo "  📝 Git: Uncommitted changes present"
        else
            echo "  ✅ Git: Working directory clean"
        fi
    fi
}

###########################################
# Main Execution
###########################################
main() {
    # Check ContextKit installation and version compatibility
    if ! check_contextkit_installation; then
        return 1
    fi

    # Validate template health
    check_template_health

    # Quick git status (useful for migration safety)
    check_git_status

    echo "✅ ContextKit infrastructure: Ready"
}

# Execute main function
main "$@"